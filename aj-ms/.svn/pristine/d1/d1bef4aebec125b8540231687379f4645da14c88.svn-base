package com.spt.score.action;

import java.io.File;
import java.io.FileOutputStream;
import java.io.InputStream;
import java.net.URLEncoder;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.commons.lang3.StringUtils;
import org.apache.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Scope;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;

import com.frame.core.action.FtpImgDownUploadAction;
import com.frame.core.service.AuthorService;
import com.frame.core.util.DateUtil;
import com.frame.core.util.GUID;
import com.frame.core.util.StringUtil;
import com.frame.core.util.SystemConfig;
import com.frame.core.vo.DataModel;
import com.frame.core.vo.MsgVo;
import com.spt.entry.model.TCertCfg;
import com.spt.score.service.impl.ScoreCertCfgServiceImpl;
import com.spt.score.vo.ScoreCertCfgVo;
import com.spt.score.vo.ScoreLimitKey;

import net.sf.json.JSONObject;

@Controller
@RequestMapping("/score/certCfg")
@Scope("prototype")
public class ScoreCertCfgAction extends FtpImgDownUploadAction {
	private Logger logger = Logger.getLogger(ScoreCertCfgAction.class);
	
	@Autowired
	private AuthorService authorService;
	@Autowired
	private ScoreCertCfgServiceImpl scoreCertCfgService;
	private MsgVo msg = new MsgVo(true);
	
	
	@RequestMapping("/list")
	@ResponseBody
	public DataModel<Map<String, Object>> getList(ScoreLimitKey limitKey){
		
		logger.info("getList request：" + JSONObject.fromObject(limitKey));
		
		DataModel<Map<String, Object>> dataModel = scoreCertCfgService.getList(limitKey);
		return dataModel;
	}
	
	
	
	
	
	//保存
	@RequestMapping("/save")
	@ResponseBody
	public MsgVo save(ScoreCertCfgVo vo, HttpServletRequest request, HttpServletResponse response) {
		logger.info("save:");
		
		if (vo == null) {
			return new MsgVo("请求有误");
		}
		
		msg = checkLogin();
		if (msg.isError()) {
			return msg;
		}
		
		if (StringUtil.isEmpty(vo.getGroupId())) {
			return new MsgVo("请选择组别");
		}
		if (StringUtil.isEmpty(vo.getIsNeedScore())) {
			return new MsgVo("请选择是否需要成绩");
		}
		
		if ("1".equals(vo.getIsNeedScore())) {
			if (StringUtil.isEmpty(vo.getMinScore())) {
				return new MsgVo("请输入达标成绩");
			}
			
			String[] times = vo.getMinScore().split(":");
			if (times.length != 3) {
				return new MsgVo("达标成绩输入有误:" + vo.getMinScore()+ ".请正确输入时分秒");
			}
			for (String t : times) {
				if (StringUtil.isEmpty(t) || t.length() != 2) {
					return new MsgVo("达标成绩输入有误:" + vo.getMinScore() + ".时分秒都应该是2位数,不足前面填0补充");
				}
				
			}
			
			try {
				int h = Integer.parseInt(times[0]);
				int m = Integer.parseInt(times[1]);
				int s = Integer.parseInt(times[2]);
				
				if (m > 59) {
					return new MsgVo("达标成绩输入有误:" + vo.getMinScore() + ".分钟数不能大于59");
				}
				if (s > 59) {
					return new MsgVo("达标成绩输入有误:" + vo.getMinScore() + ".秒数不能大于59");
				}
				
				String ts = "";
				if (h < 10) {
					ts = "0" + h;
				}
				if (m < 10) {
					ts = ts + ":" + "0" + m;
				} else {
					ts = ts + ":" + m;
				}
				if (s < 10) {
					ts = ts + ":" + "0" + s;
				} else {
					ts = ts + ":" + s;
				}
				
				if (!vo.getMinScore().equals(ts)) {
					return new MsgVo("达标成绩输入有误:" + vo.getMinScore() + ".解析后:" + ts); 
				}
				
			} catch (Exception e) {
				return new MsgVo("达标成绩输入有误:" + vo.getMinScore()); 
			}
			
			
			
			
		} else {
			vo.setIsNeedScore("0");
			vo.setMinScore("");
		}
		
		String dbFilePath = null;
		
		if (vo.getFile() != null && StringUtils.isNotEmpty(vo.getFile().getOriginalFilename()) ){
			dbFilePath = upload(vo, request);
			if (msg != null && msg.isError()) {
				return new MsgVo("操作失败:" + msg.getMsg());
			}
		} else {
			
		}
		
		
		
		
		//文件上传完成--end
		
		TCertCfg po = new TCertCfg();
		//po.setCfgId(jobId);
		po.setCfgId(vo.getGroupId());
		po.setGroupId(vo.getGroupId());
		po.setIsNeedScore(vo.getIsNeedScore());
		po.setMinScore(vo.getMinScore());
		po.setBackImg(dbFilePath);
		
		msg = scoreCertCfgService.save(po);
		
		
		return msg;
	}
	
	
	private String upload(ScoreCertCfgVo vo, HttpServletRequest request) {
		//上传文件处理---end
		
		try {
			if (vo.getFile() == null || StringUtils.isEmpty(vo.getFile().getOriginalFilename()) ){
				msg = new MsgVo("请选择需要导入的文件");
				return null;
			}
			String fileName = vo.getFile().getOriginalFilename();
			if (fileName.lastIndexOf(".") == -1) {
				msg = new MsgVo("文件类型有误");
				return null;
			}
			String suffix =  fileName.substring(fileName.lastIndexOf(".") + 1);
			if (!"jpg".equals(suffix) ) {
				msg = new  MsgVo("文件类型有误，只支持jpg");
				return null;
			}
			
			long size = vo.getFile().getSize();
			if (size == 0) {
				msg = new MsgVo("文件为空");
				return null;
			}
			
			Long maxSize = Long.parseLong(SystemConfig.getValue("file.upload.size")) * 1024 * 1000;
			if (vo.getFile().getSize() > maxSize) {
				msg = new MsgVo("请选择大小" + SystemConfig.getValue("file.upload.size") + "M以内的文件");
				return null;
			}
			
			//保存文件
			String dateStr = DateUtil.dateFromat(new Date(), DateUtil.DATE_TIME_PATTERN4);
			
			String realPath = request.getSession().getServletContext().getRealPath("");
			
			realPath = realPath 
					+ File.separator + "res" 
					+ File.separator + "certTemplate" 
					+ File.separator + vo.getGroupId();
			
			//fileName = dateStr + "_" + vo.getGroupId() + "_" + vo.getJobName() + "_" + fileName;
			fileName = dateStr + "_" + vo.getGroupId() + "." + suffix;
			//存到数据库中，统一用/
			String dbFilePath = "/res/certTemplate/" + vo.getGroupId() + "/" + fileName;
			
			File savefile = new File(new File(realPath), fileName);            
    		if (!savefile.getParentFile().exists()) {
    			savefile.getParentFile().mkdirs();     
    		}
    		
    		FileOutputStream fos = null;        
    		InputStream in = null;
		    try {            
			    // 建立文件输出流           
			    fos = new FileOutputStream(realPath + File.separator + fileName);        
			    in = vo.getFile().getInputStream(); 
				
			    byte[] buffer = new byte[1024];            
			    int len = 0;            
			    while ((len = in.read(buffer)) != -1) {                
			    	fos.write(buffer, 0, len);            
			    }  
			    fos.flush();
		    } catch (Exception e) {            
		    	logger.info("文件上传失败:" + e.toString());            
	     		e.printStackTrace();   
	     		msg = new MsgVo("文件上传失败:" + e.toString());
	     		return null;
		    } finally {   
		    	if (fos != null) {
		    		fos.close();
		    	}
		    	if (in != null) {
		    		in.close();
		    	}
		    }
		    
		    
		
			logger.info("fileUpload----url:" + dbFilePath);
			msg = new MsgVo(true);
			
			return dbFilePath;
		} catch (Exception e) {
			e.printStackTrace();
			logger.info("upload error:" + e.toString());
			msg = new MsgVo("文件上传失败:" + e.getMessage());
		}
		
		return null;
	}
	
	
	
	private MsgVo checkLogin() {
		if (authorService.getSessionUser() == null) {
			return new MsgVo("登录已失效，请重新登录");
		}
		return new MsgVo(true);
	}
	
	
	
	
}
