/** 
 * Description: TODO(用一句话描述该文件做什么)  
 * @className com.spt.entry.action.H5Action
 * @author ChingWang    
 * @date 2016-9-17 下午6:28:52
 * @version V1.0   
 * Copyright (C) 2016 www.demo.com Inc. All rights reserved.        
 */

package com.spt.entry.action;

import java.io.BufferedOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.freemarker.FreeMarkerTemplateUtils;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.servlet.ModelAndView;
import org.springframework.web.servlet.view.freemarker.FreeMarkerConfigurer;

import com.alibaba.fastjson.JSONObject;
import com.frame.core.action.FileDownUploadAction;
import com.frame.core.util.DateUtil;
import com.spt.entry.service.H5Service;
import com.util.ImgUtil;

import freemarker.template.Template;

@Controller
@RequestMapping("/h5")
public class H5Action extends FileDownUploadAction{

	@Autowired private H5Service h5Service;
	@Autowired private FreeMarkerConfigurer freeMarkerConfigurer;
	
	/**
	 * 查询用户报名信息是否存在
	 * @param certNo
	 * @param mobile
	 * @return
	 * @version
	 * Date           Author         Version     Description
	 * -----------------------------------------------------------------
	 * 2016-9-30      Ching Wang     v1.0.0      create
	 *
	 */
	@RequestMapping("/exist")
	@ResponseBody
	public String exist(String certNo, String mobile){
		JSONObject obj = new JSONObject();
		try {
			Map<String, Object> map = h5Service.isExist(certNo, mobile);
			if(map != null){
				obj.put("success", true);
				obj.put("groupId", map.get("groupId"));
			} else {
				obj.put("success", false);
				obj.put("message", "不存在。");
			}
		} catch (Exception e) {
			e.printStackTrace();
			obj.put("success", false);
			obj.put("message", "系统繁忙，请稍后重试。");
		}
		return JSONObject.toJSONString(obj);
	}
	
	@RequestMapping("/toInfoPage")
	public ModelAndView toInfoPage(int groupId, String certNo, String mobile){
		ModelAndView mv = new ModelAndView("/spt/h5/apply_info");
		try {
			mv.addObject("certNo", certNo);
			mv.addObject("mobile", mobile);
			mv.addObject("groupId", groupId);
		} catch (Exception e) {
			e.printStackTrace();
		}
		
		return mv;
	}
	
	@RequestMapping("/getAthleteInfo")
	@ResponseBody
	public String getAthleteInfo(int groupId, String certNo, String mobile, HttpServletRequest request, HttpServletResponse response){
		String path = request.getContextPath();
		String basePath = request.getScheme()+"://"+request.getServerName()+":"+request.getServerPort()+path+"/";
		Template template = null;
		String content = null;
		Map<String, Object> model = new HashMap<String, Object>();
		model.put("basePath", basePath);
		try {
			Map<String, Object> apply = h5Service.getApply(groupId, certNo, mobile);
			if(apply != null){
				apply.put("addDt", DateUtil.dateFromat(new Date(Long.parseLong(apply.get("addDt").toString()) * 1000), DateUtil.DATE_TIME_PATTERN2));
				String payType = "";
				if(apply.get("payType") != null){
					payType = apply.get("payType").toString();
					if("wxpay".equals(payType)){
						apply.put("payType", "微信支付");
					} else if("alipay".equals(payType)){
						apply.put("payType", "支付宝支付");
					} else if("cqcb".equals(payType)){
						apply.put("payType", "重庆银行");
					}
				}
				if("0".equals(apply.get("apvSts").toString())){
					apply.put("gameCode", "暂未生成");
				}
				model.put("apply", apply);
				if(groupId == 4){
					template = freeMarkerConfigurer.getConfiguration().getTemplate("sport_info_pc_h5.ftl");
				} else {
					template = freeMarkerConfigurer.getConfiguration().getTemplate("sport_info_h5.ftl");
				}
				content = FreeMarkerTemplateUtils.processTemplateIntoString(template, model);
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		return content;
	}
	/**
	 * 查询是否有成绩或者证书
	 * @param certNo
	 * @param mobile
	 * @return
	 * @version
	 * Date           Author         Version     Description
	 * -----------------------------------------------------------------
	 * 2016-9-30      Ching Wang     v1.0.0      create
	 *
	 */
	@RequestMapping("/gradeexist")
	@ResponseBody
	public String gradeexist(String certNo, String mobile){
		JSONObject obj = new JSONObject();
		try {
			//查询是否存在报名信息
			Map<String, Object> map = h5Service.isExist(certNo, mobile);
			if(map != null){
				int total = h5Service.isGradeExist(map.get("groupId").toString(), certNo, mobile);
				if(total > 0){
					obj.put("success", 1);
					obj.put("message", "存在成绩/证书。");
				} else {
					obj.put("success", 2);
					obj.put("message", "不存在成绩/证书。");
				}
			} else {
				obj.put("success", 0);
				obj.put("message", "报名信息不存在。");
			}
		} catch (Exception e) {
			e.printStackTrace();
			obj.put("success", false);
			obj.put("message", "系统繁忙，请稍后重试。");
		}
		return JSONObject.toJSONString(obj);
	}
	
	@RequestMapping("/toScorePage")
	public ModelAndView toScorePage(String certNo, String mobile){
		ModelAndView mv = new ModelAndView("/spt/h5/apply_score");
		try {
			mv.addObject("certNo", certNo);
			mv.addObject("mobile", mobile);
		} catch (Exception e) {
			e.printStackTrace();
		}
		
		return mv;
	}
	
	@RequestMapping("/getAthleteScore")
	@ResponseBody
	public String getAthleteScore(String certNo, String mobile, HttpServletRequest request, HttpServletResponse response){
		String path = request.getContextPath();
		String basePath = request.getScheme()+"://"+request.getServerName()+":"+request.getServerPort()+path+"/";
		Template template = null;
		String content = null;
		Map<String, Object> model = new HashMap<String, Object>();
		model.put("basePath", basePath);
		try {
			Map<String, Object> apply = h5Service.getApplyInfo(certNo, mobile);
			if(apply != null){
				if(apply.get("sex") != null){
					if("0".equals(apply.get("sex").toString())){
						apply.put("sex", "女");
					}else if("1".equals(apply.get("sex").toString())){
						apply.put("sex", "男");
					}else {
						apply.put("sex", "保密");
					}
				} else {
					apply.put("sex", "保密");
				}
				if(apply.get("childSex") != null){
					if("0".equals(apply.get("childSex").toString())){
						apply.put("childSex", "女");
					}else if("1".equals(apply.get("childSex").toString())){
						apply.put("childSex", "男");
					}else {
						apply.put("childSex", "保密");
					}
				} else {
					apply.put("childSex", "保密");
				}
				model.put("apply", apply);
				
				Map<String, Object> score = h5Service.getScoreInfo(apply.get("applyId").toString());
				if(score.get("certUrl") != null && !"".equals(score.get("certUrl").toString())){
					score.put("certUrl", ImgUtil.fixUrl(score.get("certUrl").toString()));
				}
				model.put("score", score);
				if(apply.get("groupId") != null && "4".equals(apply.get("groupId").toString())){
					template = freeMarkerConfigurer.getConfiguration().getTemplate("sport_score_pc_h5.ftl");
				} else {
					template = freeMarkerConfigurer.getConfiguration().getTemplate("sport_score_h5.ftl");
				}
				content = FreeMarkerTemplateUtils.processTemplateIntoString(template, model);
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		return content;
	}
	
	@RequestMapping("/downloadCert")
	public void downloadCert(HttpServletResponse response, String applyId){
		try {
			Map<String, Object> score = h5Service.getScoreInfo(applyId);
			String url = Thread.currentThread().getContextClassLoader().getResource("/").getPath();
			url = url.replace("/WEB-INF/classes/", "");
			String path = url + score.get("certUrl").toString();
			path = path.replaceAll("%20", " ");
			//String path = ImgUtil.fixUrl(score.get("certUrl").toString());
			File file = new File(path);
			//还原"/"转义fileName.replaceAll("%2F", "/");
			String fileName = path.substring(path.lastIndexOf("/")+1);//URLEncoder.encode(fileName.substring(fileName.lastIndexOf("/")+1), "UTF-8");
			// 获得输入流
			InputStream in = new FileInputStream(file);
			byte[] buffer;
			buffer = new byte[in.available()];
			in.read(buffer);
			in.close();
			/** 设置HTML头部信息 **/
			response.setHeader("Content-Disposition", "attachment; filename=\"" + fileName + "\"");
			response.addHeader("Content-Length", "" + buffer.length);
			response.setContentType("application/octet-stream;charset=UTF-8");

			/** 获得输出流 **/
			OutputStream outputStream = new BufferedOutputStream(response.getOutputStream());
			/** 从字节数组中将文件写到输出流中 **/
			outputStream.write(buffer);
			/** 清空输出流 **/
			outputStream.flush();
			outputStream.close();
			//更新数据
			h5Service.updateCertStatus(applyId);
		} catch (FileNotFoundException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		}
	}
}
