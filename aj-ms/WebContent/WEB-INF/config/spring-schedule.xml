<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:tx="http://www.springframework.org/schema/tx" xmlns:aop="http://www.springframework.org/schema/aop" xmlns:util="http://www.springframework.org/schema/util"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
							http://www.springframework.org/schema/beans/spring-beans.xsd
							http://www.springframework.org/schema/context  
       						http://www.springframework.org/schema/context/spring-context.xsd
        					http://www.springframework.org/schema/tx
        					http://www.springframework.org/schema/tx/spring-tx.xsd
        					http://www.springframework.org/schema/aop
         					http://www.springframework.org/schema/aop/spring-aop.xsd
         					http://www.springframework.org/schema/util 
         					http://www.springframework.org/schema/util/spring-util.xsd
         					http://www.springframework.org/schema/mvc     
    						http://www.springframework.org/schema/mvc/spring-mvc.xsd">
     <!-- 不使用DB持久化的 demo配置 -->
     <!--  
	<bean name="demoJob" class="org.springframework.scheduling.quartz.JobDetailFactoryBean">
		<property name="jobClass" value="com.mymost.task.jobs.DemoJob" />
	 	<property name="group" value="globalJobGroup"/>
		<property name="durability" value="true" />
	</bean>
	<bean id="demoJobTrigger" class="org.springframework.scheduling.quartz.CronTriggerFactoryBean">
		<property name="group" value="globalJobGroup" />
		<property name="jobDetail" ref="demoJob" />
		<property name="cronExpression" value="* * 1 * * ?" />
	</bean>
    -->
    
    
	 
	 <!-- quartz-2.x启动触发器的配置开始 -->  
    <bean name="SRVQuertz"  lazy-init="false" autowire="no" class="org.springframework.scheduling.quartz.SchedulerFactoryBean">  
    	<property name="dataSource" ref="dataSource"/>
    	<property name="applicationContextSchedulerContextKey" value="applicationContext" />
    	<!-- 这个是必须的，QuartzScheduler 延时启动，应用启动完后 QuartzScheduler 再启动 -->
    	<property name="startupDelay" value="10"/>
    	<!-- 这个是可选，QuartzScheduler启动时更新己存在的Job，这样就不用每次修改targetObject后删除qrtz_job_details表对应记录了-->
    	<property name="overwriteExistingJobs" value="true" />
		<property name="quartzProperties">
			<props>
				<prop key="org.quartz.threadPool.class">org.quartz.simpl.SimpleThreadPool</prop>
				<prop key="org.quartz.scheduler.instanceName">SRV_Scheduler</prop>
				<prop key="org.quartz.scheduler.instanceId">AUTO</prop>
				<prop key="org.quartz.threadPool.threadCount">15</prop>
				<prop key="org.quartz.threadPool.threadPriority">9</prop>
				<prop key="org.quartz.jobStore.class">org.quartz.impl.jdbcjobstore.JobStoreTX</prop>
				<prop key="org.quartz.jobStore.misfireThreshold">7200</prop>
				<prop key="org.quartz.jobStore.isClustered">false</prop>
				<prop key="org.quartz.jobStore.tablePrefix">QRTZ_</prop>
				<prop key="org.quartz.jobStore.clusterCheckinInterval">20000</prop>
			</props>
		</property>
        <property name="triggers">  
            <list>
			    <!-- <ref bean="demoJob"/> -->
			   
			</list> 
        </property>  
    </bean>
    
</beans>